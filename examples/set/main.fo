package main

import "fmt"

// Set is an unsorted set of unique values of type T.
type Set[T] map[T]struct{}

// New returns an initialized Set.
func New[T]() Set[T] {
	return Set[T]{}
}

// NewFromSlice returns a new set constructed from the given slice. Any
// duplicate elements will be removed.
func NewFromSlice[T](slice []T) Set[T] {
	s := New[T]()
	for _, v := range slice {
		s.Add(v)
	}
	return s
}

// Add adds each value in vs to the set.
func (s Set[T]) Add(vs ...T) {
	for _, v := range vs {
		s[v] = struct{}{}
	}
}

// Remove removes v from the set. If v is not in the set, this has no effect.
func (s Set[T]) Remove(v T) {
	delete(s, v)
}

// Contains returns true if the set contains v and false otherwise.
func (s Set[T]) Contains(v T) bool {
	_, ok := s[v]
	return ok
}

// Slice returns the elements in the set as a slice of T. It returns an
// empty slice if the set contains no elements. The elements returned will be
// in random order.
func (s Set[T]) Slice() []T {
	slice := make([]T, len(s))
	i := 0
	for v := range s {
		slice[i] = v
		i++
	}
	return slice
}

// String implements the Stringer interface.
func (s Set) String() string {
	return fmt.Sprint(s.Slice())
}

// Union returns a new set which contains all elements that are in either a or
// b.
func Union[T](a, b Set[T]) Set[T] {
	result := New[T]()
	for v := range a {
		result.Add(v)
	}
	for v := range b {
		result.Add(v)
	}
	return result
}

// Intersect returns a new set which contains only elements that are in both a
// and b.
func Intersect[T](a, b Set[T]) Set[T] {
	result := New[T]()
	for v := range a {
		if b.Contains(v) {
			result.Add(v)
		}
	}
	return result
}

// Diff returns a new set which contains all elements in a that are not in b.
func Diff[T](a, b Set[T]) Set[T] {
	result := New[T]()
	for v := range a {
		if !b.Contains(v) {
			result.Add(v)
		}
	}
	return result
}

func main() {
	a := NewFromSlice[int]([]int{
		1,
		2,
		3,
	})
	fmt.Printf("a contains 1: %v\n", a.Contains(1))
	// Output: a contains 1: true
	fmt.Printf("a: %s\n", a)
	// Output: a: [1 2 3]

	b := NewFromSlice[int]([]int{
		2,
		3,
		4,
	})
	fmt.Printf("b: %s\n", b)
	// Output: b: [4 2 3]

	fmt.Printf("Union: %v\n", Union[int](a, b))
	// Output: Union: [3 4 1 2]
	fmt.Printf("Intersect: %v\n", Intersect[int](a, b))
	// Output: Intersect: [2 3]
	fmt.Printf("Diff(a, b): %v\n", Diff[int](a, b))
	// Output: Diff(a, b): [1]
	fmt.Printf("Diff(b, a): %v\n", Diff[int](b, a))
	// Output: Diff(b, a): [4]

	a.Remove(2)
	fmt.Printf("a after calling Remove(2): %s\n", a)
	// Output: a after calling Remove(2): [1 3]

	fmt.Printf("a as a slice: %v\n", a.Slice())
	// Output: a as a slice: [1 3]
}
